/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package intrachat.gui;

import java.awt.Cursor;
import java.awt.Graphics2D;
import java.awt.Image;
import java.awt.RenderingHints;
import java.awt.image.BufferedImage;
import java.io.BufferedReader;
import java.io.File;
import java.io.FileNotFoundException;
import java.io.FileReader;
import java.io.IOException;
import java.util.ArrayList;
import java.util.prefs.Preferences;
import javax.swing.DefaultListModel;
import javax.swing.ImageIcon;
import javax.swing.JFileChooser;
import javax.swing.ListSelectionModel;
import intrachat.Contact;
import intrachat.networking.MessageListener;
import intrachat.networking.WritableGUI;

/**
 *
 * @author gabi.adotevi
 */
public class MainScreen extends javax.swing.JFrame implements WritableGUI {

    private MessageListener listener;
    private JFileChooser fc;
    private final DefaultListModel contactslistModel;
    private final DefaultListModel messageslistModel;

    // Contacts lists
    private final ArrayList<Contact> contacts = new ArrayList<>();

    // Chat screens
    private final ArrayList<ChatScreen> chatScreens = new ArrayList<>();

    /**
     * @throws java.io.IOException
     */
    public MainScreen() throws IOException {
        initComponents();

        loadContacts("repertoire.data");

        messageslistModel = new DefaultListModel();
        messagesList.setModel(messageslistModel);

        // Display contacts
        String myIpAddress = Contact.getMyIpAddress();
        contactslistModel = new DefaultListModel();
        for (Contact contact : contacts) {
            if (!myIpAddress.equals(contact.getIpAddress())) {
                contactslistModel.addElement(contact.getName());
            }
        }

        //Create the list and put it in a scroll pane.
        contactsList.setModel(contactslistModel);
        contactsList.setSelectionMode(ListSelectionModel.SINGLE_SELECTION);

        setUserImage();
        startChatServer();
    }

    private void startChatServer() {

        String portStr = getMyPort();

        if (portStr != null) {
            int port = Integer.parseInt(getMyPort());

            listener = new MessageListener(this, port);
            listener.setChatScreens(chatScreens);
            listener.setContacts(contacts);
            listener.setMessageslist(messageslistModel);
            listener.start();
        } else {
            writeStatus("Could not listen on port");
        }
    }

    private void setUserImage() {
        Preferences prefs = Preferences.userNodeForPackage(MainScreen.class);

        String imgPath = prefs.get("userImage", "");
        File f = new File(imgPath);
        if (f.exists() && !f.isDirectory()) {
            ImageIcon icon = createImageIcon(imgPath);
            ImageIcon thumbnailIcon = new ImageIcon(getScaledImage(icon.getImage(), 96, 96));
            userImageLabel.setIcon(thumbnailIcon);
            userImageLabel.setText("");
        } else {
            userImageLabel.setText("Choose Image");
        }

    }

    private void loadContacts(String path) throws FileNotFoundException, IOException {
        String line;
        FileReader fr = new FileReader(path);

        try (BufferedReader br = new BufferedReader(fr)) {
            while ((line = br.readLine()) != null) {
                contacts.add(new Contact(
                        line.split("/")[0],
                        line.split("/")[1],
                        line.split("/")[2],
                        line.split("/")[3]));
            }
        }
    }

    public String getMyPort() {
        Contact contact = Contact.findContactByIpAddress(contacts, Contact.getMyIpAddress());

        if (contact != null) {
            return contact.getPort();
        } else {
            return null;
        }
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        statuslPanel = new javax.swing.JPanel();
        jScrollPane4 = new javax.swing.JScrollPane();
        statusTextArea = new javax.swing.JTextArea();
        pnlIdentification = new javax.swing.JPanel();
        jScrollPane2 = new javax.swing.JScrollPane();
        jTextArea1 = new javax.swing.JTextArea();
        userImageLabel = new javax.swing.JLabel();
        pnlTabMain = new javax.swing.JTabbedPane();
        pnlContacts = new javax.swing.JPanel();
        jScrollPane1 = new javax.swing.JScrollPane();
        contactsList = new javax.swing.JList();
        pnlMessages = new javax.swing.JPanel();
        jScrollPane3 = new javax.swing.JScrollPane();
        messagesList = new javax.swing.JList();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        setTitle("My Chat ");
        setBackground(new java.awt.Color(255, 255, 255));
        setMinimumSize(new java.awt.Dimension(65, 278));

        statuslPanel.setBorder(javax.swing.BorderFactory.createTitledBorder("Status"));
        statuslPanel.setPreferredSize(new java.awt.Dimension(178, 125));
        statuslPanel.setLayout(new java.awt.BorderLayout());

        jScrollPane4.setPreferredSize(new java.awt.Dimension(166, 125));

        statusTextArea.setEditable(false);
        statusTextArea.setColumns(20);
        statusTextArea.setRows(5);
        statusTextArea.setPreferredSize(new java.awt.Dimension(164, 125));
        jScrollPane4.setViewportView(statusTextArea);

        statuslPanel.add(jScrollPane4, java.awt.BorderLayout.CENTER);

        getContentPane().add(statuslPanel, java.awt.BorderLayout.SOUTH);

        pnlIdentification.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(0, 0, 0)));
        pnlIdentification.setPreferredSize(new java.awt.Dimension(232, 96));
        pnlIdentification.setLayout(new java.awt.BorderLayout());

        jScrollPane2.setBackground(new java.awt.Color(204, 204, 204));
        jScrollPane2.setHorizontalScrollBarPolicy(javax.swing.ScrollPaneConstants.HORIZONTAL_SCROLLBAR_NEVER);
        jScrollPane2.setVerticalScrollBarPolicy(javax.swing.ScrollPaneConstants.VERTICAL_SCROLLBAR_NEVER);

        jTextArea1.setBackground(new java.awt.Color(204, 204, 204));
        jTextArea1.setColumns(20);
        jTextArea1.setRows(5);
        jTextArea1.setEnabled(false);
        jTextArea1.setPreferredSize(new java.awt.Dimension(164, 64));
        jScrollPane2.setViewportView(jTextArea1);

        pnlIdentification.add(jScrollPane2, java.awt.BorderLayout.CENTER);

        userImageLabel.setBackground(new java.awt.Color(204, 204, 204));
        userImageLabel.setFont(new java.awt.Font("Tahoma", 0, 10)); // NOI18N
        userImageLabel.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        userImageLabel.setText("Choose Image");
        userImageLabel.setToolTipText("Click to set or change the image");
        userImageLabel.setPreferredSize(new java.awt.Dimension(96, 96));
        userImageLabel.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                userImageLabelMouseClicked(evt);
            }
            public void mouseEntered(java.awt.event.MouseEvent evt) {
                userImageLabelMouseEntered(evt);
            }
        });
        pnlIdentification.add(userImageLabel, java.awt.BorderLayout.LINE_START);

        getContentPane().add(pnlIdentification, java.awt.BorderLayout.NORTH);
        pnlIdentification.getAccessibleContext().setAccessibleName("pnlIdentification");
        pnlIdentification.getAccessibleContext().setAccessibleDescription("");

        pnlTabMain.setBorder(javax.swing.BorderFactory.createEmptyBorder(1, 1, 1, 1));

        pnlContacts.setMinimumSize(new java.awt.Dimension(23, 100));
        pnlContacts.setLayout(new java.awt.BorderLayout());

        contactsList.setFont(new java.awt.Font("Tahoma", 0, 12)); // NOI18N
        contactsList.setModel(new javax.swing.AbstractListModel() {
            String[] strings = { "Contact 1", "Contact 2", " " };
            public int getSize() { return strings.length; }
            public Object getElementAt(int i) { return strings[i]; }
        });
        contactsList.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                contactsListMouseClicked(evt);
            }
        });
        jScrollPane1.setViewportView(contactsList);

        pnlContacts.add(jScrollPane1, java.awt.BorderLayout.CENTER);

        pnlTabMain.addTab("Contacts", pnlContacts);
        pnlContacts.getAccessibleContext().setAccessibleName("Conversations");

        pnlMessages.setLayout(new java.awt.BorderLayout());

        messagesList.setModel(new javax.swing.AbstractListModel() {
            String[] strings = { "Message 1", "Message 2", " " };
            public int getSize() { return strings.length; }
            public Object getElementAt(int i) { return strings[i]; }
        });
        messagesList.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                messagesListMouseClicked(evt);
            }
        });
        jScrollPane3.setViewportView(messagesList);

        pnlMessages.add(jScrollPane3, java.awt.BorderLayout.CENTER);

        pnlTabMain.addTab("Messages", pnlMessages);

        getContentPane().add(pnlTabMain, java.awt.BorderLayout.CENTER);
        pnlTabMain.getAccessibleContext().setAccessibleName("Contacts");

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void userImageLabelMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_userImageLabelMouseClicked

        //Set up the file chooser.
        if (fc == null) {
            fc = new JFileChooser();

            // Add a image file filter            
            fc.addChoosableFileFilter(new ImageFilter());
            fc.setAcceptAllFileFilterUsed(false);

        }

        //Show it.
        int returnVal = fc.showDialog(MainScreen.this, "Select");

        //Process the results.
        if (returnVal == JFileChooser.APPROVE_OPTION) {
            File file = fc.getSelectedFile();
            Preferences prefs = Preferences.userNodeForPackage(MainScreen.class);
            prefs.put("userImage", file.getPath());
            setUserImage();
        }

        //Reset the file chooser for the next time it's shown.
        fc.setSelectedFile(null);
    }//GEN-LAST:event_userImageLabelMouseClicked

    private void userImageLabelMouseEntered(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_userImageLabelMouseEntered
        userImageLabel.setCursor(new Cursor(Cursor.HAND_CURSOR));
    }//GEN-LAST:event_userImageLabelMouseEntered

    private void messagesListMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_messagesListMouseClicked
        if (evt.getClickCount() == 2) {

        }
    }//GEN-LAST:event_messagesListMouseClicked

    private void contactsListMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_contactsListMouseClicked
        if (evt.getClickCount() == 2) {
            launchChatScreen(contactsList.getSelectedValue().toString());
        }
    }//GEN-LAST:event_contactsListMouseClicked

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            @Override
            public void run() {
                try {
                    new MainScreen().setVisible(true);
                } catch (IOException ex) {
                    System.out.println(ex);
                }
            }
        });
    }

    private Image getScaledImage(Image img, int w, int h) {
        BufferedImage resizedImg = new BufferedImage(w, h, BufferedImage.TYPE_INT_ARGB);
        Graphics2D g2 = resizedImg.createGraphics();
        g2.setRenderingHint(RenderingHints.KEY_INTERPOLATION, RenderingHints.VALUE_INTERPOLATION_BILINEAR);
        g2.drawImage(img, 0, 0, w, h, null);
        g2.dispose();
        return resizedImg;
    }

    private ImageIcon createImageIcon(String path) {
        if (path != null) {
            return new ImageIcon(path);
        } else {
            System.err.println("Couldn't find image file: " + path);
            return null;
        }
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JList contactsList;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JScrollPane jScrollPane2;
    private javax.swing.JScrollPane jScrollPane3;
    private javax.swing.JScrollPane jScrollPane4;
    private javax.swing.JTextArea jTextArea1;
    private javax.swing.JList messagesList;
    private javax.swing.JPanel pnlContacts;
    private javax.swing.JPanel pnlIdentification;
    private javax.swing.JPanel pnlMessages;
    private javax.swing.JTabbedPane pnlTabMain;
    private javax.swing.JTextArea statusTextArea;
    private javax.swing.JPanel statuslPanel;
    private javax.swing.JLabel userImageLabel;
    // End of variables declaration//GEN-END:variables

    @Override
    public void write(String s) {
        throw new UnsupportedOperationException("Not supported yet.");
    }

    @Override
    public void writePopUp(String s) {
        throw new UnsupportedOperationException("Not supported yet.");
    }

    @Override
    public void writeStatus(String s) {
        statusTextArea.append(s + "\n");
    }

    public void launchChatScreen(String contactName) {

        // Search for existing chat screen and display it if found
        for (ChatScreen chatScreen : chatScreens) {
            if (chatScreen.getReceiverContact().getName().equals(contactName)) {
                System.out.println("Screen found...");
                chatScreen.setVisible(true);

                return;
            }
        }

        // Create new chat screen and display it since none was found
        Contact receiverContact = Contact.findContactByName(contacts, contactName);
        Contact myContact = Contact.findContactByIpAddress(contacts, Contact.getMyIpAddress());

        ChatScreen chatScreen = ChatScreen.createChatScreen(receiverContact, myContact);
        chatScreens.add(chatScreen);

    }
}
